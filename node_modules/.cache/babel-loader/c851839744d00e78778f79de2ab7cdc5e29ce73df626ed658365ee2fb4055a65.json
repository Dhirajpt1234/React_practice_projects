{"ast":null,"code":"var _jsxFileName = \"/Users/dhiraj/Desktop/Dhiraj/web/React/react_practise_projects/React_practice_projects/src/Hooks/UseState.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UseState() {\n  _s();\n  function countInitial() {\n    console.log(\"Run function\");\n    return 0;\n  }\n  const [count, setCount] = useState(countInitial());\n\n  //   const [state, setState] = useState(() => {\n  //     countInitial();\n  //   });\n  const [state1, setState1] = useState(countInitial());\n  const increment = () => {\n    setCount(prevValue => {\n      return prevValue + 1;\n    });\n    setCount(prevValue => {\n      return prevValue + 1;\n    });\n\n    //this both update will only one , caz react changes are asyncronus and they are putting the value from count state, which is updated later, so both values will set teh value to the same.\n    // setCount(count + 1);\n    // setCount(count + 1); // as I have written it at last, It can overrid prev 2.\n  };\n  const decrement = () => {\n    setCount(prevValue => {\n      return prevValue - 1;\n    });\n    setCount(prevValue => {\n      return prevValue - 1;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increment,\n        children: \"Incre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrement,\n        children: \"Decr\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(UseState, \"3VYOQkQ7g5gf7KDeucNA/fYiYL4=\");\n_c = UseState;\nvar _c;\n$RefreshReg$(_c, \"UseState\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","UseState","_s","countInitial","console","log","count","setCount","state1","setState1","increment","prevValue","decrement","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/dhiraj/Desktop/Dhiraj/web/React/react_practise_projects/React_practice_projects/src/Hooks/UseState.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nexport default function UseState() {\n  function countInitial() {\n    console.log(\"Run function\");\n    return 0;\n  }\n  const [count, setCount] = useState(countInitial());\n\n  //   const [state, setState] = useState(() => {\n  //     countInitial();\n  //   });\n  const [state1, setState1] = useState(countInitial());\n\n  const increment = () => {\n    setCount((prevValue) => {\n      return prevValue + 1;\n    });\n\n    setCount((prevValue) => {\n      return prevValue + 1;\n    });\n\n    //this both update will only one , caz react changes are asyncronus and they are putting the value from count state, which is updated later, so both values will set teh value to the same.\n    // setCount(count + 1);\n    // setCount(count + 1); // as I have written it at last, It can overrid prev 2.\n  };\n\n  const decrement = () => {\n    setCount((prevValue) => {\n      return prevValue - 1;\n    });\n\n    setCount((prevValue) => {\n      return prevValue - 1;\n    });\n  };\n\n  return (\n    <>\n      <div>\n        <div>{count}</div>\n        <button onClick={increment}>Incre</button>\n        <button onClick={decrement}>Decr</button>\n      </div>\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,SAASC,YAAYA,CAAA,EAAG;IACtBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B,OAAO,CAAC;EACV;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACO,YAAY,CAAC,CAAC,CAAC;;EAElD;EACA;EACA;EACA,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAACO,YAAY,CAAC,CAAC,CAAC;EAEpD,MAAMO,SAAS,GAAGA,CAAA,KAAM;IACtBH,QAAQ,CAAEI,SAAS,IAAK;MACtB,OAAOA,SAAS,GAAG,CAAC;IACtB,CAAC,CAAC;IAEFJ,QAAQ,CAAEI,SAAS,IAAK;MACtB,OAAOA,SAAS,GAAG,CAAC;IACtB,CAAC,CAAC;;IAEF;IACA;IACA;EACF,CAAC;EAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtBL,QAAQ,CAAEI,SAAS,IAAK;MACtB,OAAOA,SAAS,GAAG,CAAC;IACtB,CAAC,CAAC;IAEFJ,QAAQ,CAAEI,SAAS,IAAK;MACtB,OAAOA,SAAS,GAAG,CAAC;IACtB,CAAC,CAAC;EACJ,CAAC;EAED,oBACEb,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACEf,OAAA;MAAAe,QAAA,gBACEf,OAAA;QAAAe,QAAA,EAAMP;MAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAClBnB,OAAA;QAAQoB,OAAO,EAAER,SAAU;QAAAG,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1CnB,OAAA;QAAQoB,OAAO,EAAEN,SAAU;QAAAC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC;EAAC,gBACN,CAAC;AAEP;AAACf,EAAA,CA7CuBD,QAAQ;AAAAkB,EAAA,GAARlB,QAAQ;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}