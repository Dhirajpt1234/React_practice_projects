{"ast":null,"code":"var _jsxFileName = \"/Users/dhiraj/Desktop/Dhiraj/web/React/react_practise_projects/React_practice_projects/src/ProgressBar/ProgressBar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ProgressBar.css'; // You can create a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProgressBar() {\n  _s();\n  const [isDragging, setIsDragging] = useState(false);\n  const [progressLevel, setProgressLevel] = useState(0);\n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n  const handleDragEnd = () => {\n    setIsDragging(false);\n  };\n  const handleDrag = e => {\n    if (isDragging) {\n      const progressBar = document.getElementById('progress-bar');\n      const {\n        left,\n        width\n      } = progressBar.getBoundingClientRect();\n      let newX = e.clientX - left;\n\n      // Ensure the handle stays within the bounds of the progress bar\n      newX = Math.max(0, Math.min(newX, width));\n\n      // Calculate the progress level (0 to 5)\n      const newProgressLevel = Math.ceil(newX / width * 5);\n      setProgressLevel(newProgressLevel);\n    }\n  };\n  const updateEmoji = level => {\n    switch (level) {\n      case 0:\n        return 'üò°';\n      case 1:\n        return 'üòü';\n      case 2:\n      case 3:\n        return 'üòê';\n      case 4:\n        return 'üòä';\n      case 5:\n        return 'üòÅ';\n      default:\n        return 'üòê';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ProgressBar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"progress-bar\",\n        onMouseDown: handleDragStart,\n        onMouseUp: handleDragEnd,\n        onMouseMove: handleDrag,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"draggable-handle\",\n          style: {\n            left: `${progressLevel / 5 * 100}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"emoji-container\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"emoji\",\n          style: {\n            fontSize: '24px'\n          },\n          children: updateEmoji(progressLevel)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(ProgressBar, \"TAtEMaMZxhUAYPRrBpmTqJmFy74=\");\n_c = ProgressBar;\nexport default ProgressBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ProgressBar","_s","isDragging","setIsDragging","progressLevel","setProgressLevel","handleDragStart","handleDragEnd","handleDrag","e","progressBar","document","getElementById","left","width","getBoundingClientRect","newX","clientX","Math","max","min","newProgressLevel","ceil","updateEmoji","level","className","children","id","onMouseDown","onMouseUp","onMouseMove","style","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","_c","$RefreshReg$"],"sources":["/Users/dhiraj/Desktop/Dhiraj/web/React/react_practise_projects/React_practice_projects/src/ProgressBar/ProgressBar.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './ProgressBar.css'; // You can create a CSS file for styling\n\nfunction ProgressBar() {\n  const [isDragging, setIsDragging] = useState(false);\n  const [progressLevel, setProgressLevel] = useState(0);\n\n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n\n  const handleDragEnd = () => {\n    setIsDragging(false);\n  };\n\n  const handleDrag = (e) => {\n    if (isDragging) {\n      const progressBar = document.getElementById('progress-bar');\n      const { left, width } = progressBar.getBoundingClientRect();\n      let newX = e.clientX - left;\n\n      // Ensure the handle stays within the bounds of the progress bar\n      newX = Math.max(0, Math.min(newX, width));\n\n      // Calculate the progress level (0 to 5)\n      const newProgressLevel = Math.ceil((newX / width) * 5);\n\n      setProgressLevel(newProgressLevel);\n    }\n  };\n\n  const updateEmoji = (level) => {\n    switch (level) {\n      case 0:\n        return 'üò°';\n      case 1:\n        return 'üòü';\n      case 2:\n      case 3:\n        return 'üòê';\n      case 4:\n        return 'üòä';\n      case 5:\n        return 'üòÅ';\n      default:\n        return 'üòê';\n    }\n  };\n\n  return (\n    <div className=\"ProgressBar\">\n      <div id=\"progress-bar-container\">\n        <div\n          id=\"progress-bar\"\n          onMouseDown={handleDragStart}\n          onMouseUp={handleDragEnd}\n          onMouseMove={handleDrag}\n        >\n          <div\n            id=\"draggable-handle\"\n            style={{ left: `${(progressLevel / 5) * 100}%` }}\n          ></div>\n        </div>\n        <div id=\"emoji-container\">\n          <span id=\"emoji\" style={{ fontSize: '24px' }}>\n            {updateEmoji(progressLevel)}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProgressBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}